# shellcheck shell=bash
# vim: set ft=sh:
# 
switch-pg () {
	# Args
	new_pg=$1
	new_jo=$2

	# Identify current branch setup. When using switch all of these
	# should match.
	pg_branch=${JO_INST_PG#/opt/sean/PostgreSQL}
	if [[ -z $pg_branch ]]
	then
		pg_branch=master
	else
		pg_branch=${pg_branch#-}
	fi

	jo_branch=${JO_INST_JO#/opt/sean/JustOne}
	if [[ -z $jo_branch ]]
	then
		jo_branch=master
	else
		jo_branch=${jo_branch#-}
	fi

	# If no branch specified then show current selection
	if [[ -z $new_pg && -z $new_jo ]]
	then
		echo "pg=$pg_branch"
		echo "jo=$jo_branch"
		return 0
	fi

	# If no branch specified then keep current branch
	if [[ -z $new_pg ]]
	then
		new_pg=$pg_branch
	fi

	if [[ -z $new_jo ]]
	then
		new_jo=$new_pg
	elif [[ "$new_jo" == "-" ]]
	then
		new_jo=$jo_branch
	fi

	# debug
	# printf "%80.80s -> %-80.80s\n" "$pg_branch" "$new_jo"
	# printf "%80.80s -> %-80.80s\n" "$jo_branch" "$new_jo"

	# Check branches exist
	if [[ ! -d ~/work/PostgreSQL/$new_pg ]]
	then
		echo "ERROR: pg branch does not exist: $new_pg"
		return 1
	fi

	if [[ ! -d ~/work/JustOne/$new_jo ]]
	then
		# Attempt to work it out based on the postgres
		pushd ~/work/PostgreSQL/$new_pg > /dev/null 2>&1
		if [[ -d .git/svn/refs ]]
		then
			url=$(git svn info | awk '/^URL:/ { print $2 }')
			url=${url#http://svn/PostgreSQL/}
			if [[ $url == "trunk" && -d ~/work/JustOne/master ]]
			then
				new_jo=master
			else
				url=${url#branches/}
				if [[ ! -z $url && -d ~/work/JustOne/$url ]]
				then
					new_jo=$url
				fi
			fi
		else
			new_jo=master
		fi

		popd > /dev/null 2>&1

		if [[ ! -d ~/work/JustOne/$new_jo ]]
		then
			echo "ERROR: could not identify jo branch, tried: master, $url"
			return 1
		fi
	fi

	# Setup new postgres environment variables
	if [[ "$new_pg" != "master" ]]
	then
		NEW_JO_INST_PG="/opt/sean/PostgreSQL-$new_pg"
		NEW_JODATA="/opt/sean/postgres-data-$new_pg"
	else
		NEW_JO_INST_PG=/opt/sean/PostgreSQL
		NEW_JODATA=/opt/sean/postgres-data
	fi

	# Setup new justone environment variables
	if [[ "$new_jo" != "master" ]]
	then
		NEW_JO_INST_JO="/opt/sean/JustOne-$new_jo"
	else
		NEW_JO_INST_JO="/opt/sean/JustOne"
	fi

	# debug
	# printf "%80.80s -> %-80.80s\n" "$JO_INST_PG" "$NEW_JO_INST_PG"
	# printf "%80.80s -> %-80.80s\n" "$JO_INST_JO" "$NEW_JO_INST_JO"

	# Setup new PATH
	# TODO This won't work if there are spaces anywhere
	NEW_PATH=
	for d in ${PATH//:/ }
	do
		newdir=$d
		if [[ "$d" == "$JO_INST_PG/bin" ]]
		then
			newdir="$NEW_JO_INST_PG/bin"
		elif [[ "$d" == "$JO_INST_JO/bin" ]]
		then
			newdir="$NEW_JO_INST_JO/bin"
		fi

		if [[ -z $NEW_PATH ]];
		then
			NEW_PATH="$newdir"
		else
			NEW_PATH="${NEW_PATH}:$newdir"
		fi
	done

	# Fix LD_LIBRARY_PATH
	# TODO Fine, so long as there are no paths with spaces in
	NEW_LD_LIBRARY_PATH=
	for d in ${LD_LIBRARY_PATH//:/ }
	do
		newdir=$d
		if [[ "$d" == "$JO_INST_JO/lib" ]]
		then
			newdir="$NEW_JO_INST_JO/lib"
		elif [[ "$d" == "$JO_INST_PG/lib" ]]
		then
			newdir="$NEW_JO_INST_PG/lib"
		fi

		if [[ -z $NEW_LD_LIBRARY_PATH ]];
		then
			NEW_LD_LIBRARY_PATH="$newdir"
		else
			NEW_LD_LIBRARY_PATH="$NEW_LD_LIBRARY_PATH:$newdir"
		fi
	done

	# debug
	# # shellcheck disable=SC2086,SC2116
	# orig_path=( $(echo ${PATH//:/ }) )
	# # shellcheck disable=SC2086,SC2116
	# new_path=( $(echo ${NEW_PATH//:/ }) )
	# i=0
	# while [[ $i -lt ${#orig_path[@]} ]]
	# do
	# 	(( i++ ))
	# 	printf "%80.80s -> %-80.80s\n" "${orig_path[$i]}" "${new_path[$i]}"
	# done

	# Update enviromment and path
	JO_INST_PG=$NEW_JO_INST_PG
	JO_INST_JO=$NEW_JO_INST_JO
	LD_LIBRARY_PATH="$NEW_LD_LIBRARY_PATH"
	PATH="$NEW_PATH"
	JODATA=$NEW_JODATA

	export JO_INST_PG JO_INST_JO LD_LIBRARY_PATH JODATA PATH

	# Update test root
	if [[ ! -z $PGTESTDIR ]]
	then
		if [[ $pg_branch == "master" ]]
		then
			# If we were on master then simply add new branch as subdir
			PGTESTDIR=${PGTESTDIR}/$new_pg
		else
			# If we were not on master then remove branch
			PGTESTDIR=${PGTESTDIR%/$pg_branch}

			# If new branch is not master then append it
			if [[ $new_pg != "master" ]]
			then
				PGTESTDIR=${PGTESTDIR}/$new_pg
			fi
		fi

		# Create test directory if it doesn't already exist
		if [[ ! -d $PGTESTDIR ]]
		then
			mkdir -p "$PGTESTDIR"
		fi
	fi

	# Update prompt
	if [[ "$new_jo" != "master" ]]
	then
		prompt_tag "[$new_pg/$new_jo]"
	elif [[ "$new_pg" != "master" ]]
	then
		prompt_tag "[$new_pg]"
	else
		prompt_tag
	fi

	PG_BRANCH="$new_pg"
	JO_BRANCH="$new_jo"

	export PG_BRANCH JO_BRANCH

	# If we're not in a sub directory of the new
	# postgres then cd there
	if [[ ! $PWD/ =~ ~/work/PostgreSQL/$PG_BRANCH/.* ]]
	then
		pgcd
	fi
}
