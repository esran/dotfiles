# vim: set ft=sh:
# Initialise DOTFILES
[[ -f $HOME/.dot ]] && source "$HOME/.dot"

echo "$HOSTNAME $(date +"%Y-%m-%d %H:%M:%S") $$ $PPID common/profile" >> "$HOME/.dot_log"

# This gets loaded as the only startup file prior to the gnome-session

# Justone variables and paths
# Try to ensure this only gets loaded once as it adds to the
# path. Do this by checking if 'env-check' is available. Can't
# rely on checking environment variables as they are retained
# when the PATH is cleared for stuff like 'tmux' sessions.
# Do this early as it clobbers LD_LIBRARY_PATH
which env-check > /dev/null 2>&1
if [[ $? -ne 0 ]]; then
	if [ -f /etc/justone_profile ]; then
		. /etc/justone_profile
	fi
fi

#################
# Path functions.
#################

# Path add function
# If there is a second parameter then prepend instead of append
pathadd() {
	if [ -d "$1" ] && [[ ":$PATH:" != *":$1:"* ]]; then
		if [ -z "$2" ]; then
			PATH="${PATH:+"$PATH:"}$1"
		else
			PATH="$1${PATH:+":$PATH"}"
		fi
	fi
}

# LD_LIBRARY_PATH
# If there is a second parameter then prepend instead of append
ldpathadd() {
	if [ -d "$1" ] && [[ ":$LD_LIBRARY_PATH:" != *":$1:"* ]]; then
		if [ -z "$2" ]; then
			LD_LIBRARY_PATH="${LD_LIBRARY_PATH:+"$LD_LIBRARY_PATH:"}$1"
		else
			LD_LIBRARY_PATH="$1${LD_LIBRARY_PATH:+":$LD_LIBRARY_PATH"}"
		fi
	fi
}

# MANPATH
# If there is a second parameter then prepend instead of append
manpathadd() {
	if [ -d "$1" ] && [[ ":$MANPATH:" != *":$1:"* ]]; then
		if [ -z "$2" ]; then
			MANPATH="${MANPATH:+"$MANPATH:"}$1"
		else
			MANPATH="$1${MANPATH:+":$MANPATH"}"
		fi
	fi
}

# Path add function
# If there is a second parameter then prepend instead of append
cdpathadd() {
	if [ -d "$1" ] && [[ ":$CDPATH:" != *":$1:"* ]]; then
		if [ -z "$2" ]; then
			CDPATH="${CDPATH:+"$CDPATH:"}$1"
		else
			CDPATH="$1${CDPATH:+":$CDPATH"}"
		fi
	fi
}

# Library path
ldpathadd /usr/local/lib

# Locally installed stuff.
pathadd "$ORIG_HOME/install/bin" pre
pathadd ~/install/bin pre
pathadd "$HOME/$HOSTNAME/install/bin" pre
ldpathadd "$ORIG_HOME/install/lib" pre
ldpathadd ~/install/lib pre
ldpathadd "$HOME/$HOSTNAME/install/lib" pre
manpathadd "$ORIG_HOME/install/share/man" pre
manpathadd ~/install/share/man pre
manpathadd "$HOME/$HOSTNAME/install/share/man" pre
manpathadd "$ORIG_HOME/$HOSTNAME/install/share/man" pre
manpathadd ~/install/man pre
manpathadd "$HOME/$HOSTNAME/install/man" pre

# Qt 5
pathadd ~/stuff/qt-5.8.0/5.8/gcc_64/bin
ldpathadd ~/stuff/qt-5.8.0/5.8/gcc_64/lib

# .local stuff (seems the Python way of doing things)
pathadd ~/.local/bin pre
ldpathadd ~/.local/lib pre
manpathadd ~/.local/man pre

# Setting MANPATH at all means default man path isn't checked :(
manpathadd /usr/share/man

# Always stick my bin on the front of the path
pathadd "$ORIG_HOME/bin" pre
pathadd ~/bin pre
pathadd "$HOME/$HOSTNAME/bin" pre

# git hub plugin
if [[ -d ~/stuff/git-hub ]]; then
	pathadd ~/stuff/git-hub/lib
	manpathadd ~/stuff/git-hub/man
	export GIT_HUB_ROOT=$HOME/stuff/git-hub
fi

# Ensure PATH and MANPATH are exported
export PATH LD_LIBRARY_PATH MANPATH

# Setup test directory for PostgreSQL JustOne tests
# This needs to be a normalised path
[[ -d $HOME/test ]] && PGTESTDIR=$HOME/test
[[ -d $HOME/$HOSTNAME/test ]] && PGTESTDIR=$(readlink -f "$HOME/$HOSTNAME/test")
export PGTESTDIR
export KEEP_DATA_DIRS=1

# Make
# Note the justone profile sets this, but we override it here
MAKEFLAGS="-j$(( $(grep -c processor /proc/cpuinfo) / 2)) V=0"
export MAKEFLAGS

# Temp folder
export TMPDIR=/tmp/${USER:-$LOGNAME}
[[ ! -d $TMPDIR ]] && mkdir "$TMPDIR"

# Setup solarized dircolors
if [[ -d $DOTFILES/externals/dircolors-solarized ]]; then
	if [[ -f $DOTFILES/externals/dircolors-solarized/dircolors.ansi-light ]]; then
		eval "$(dircolors "$DOTFILES/externals/dircolors-solarized/dircolors.ansi-light")"
	fi
fi

# Java home
if [[ -z $JAVA_HOME ]]
then
	case $(hostname) in
		iowa)
			export JAVA_HOME=/usr/lib/jvm/java-1.7.0-openjdk-amd64
			;;
		*)
			;;
	esac
fi

# Perlbrew
if [[ -d $HOME/$HOSTNAME/perlbrew ]]
then
	export PERLBREW_ROOT=$HOME/$HOSTNAME/perlbrew
	export PERLBREW_HOME=$HOME/$HOSTNAME/.perlbrew

	if [[ -f ~/$HOSTNAME/perlbrew/etc/bashrc ]]
	then
		export PERLBREW_HOME=$HOME/$HOSTNAME/.perlbrew
		source "$HOME/$HOSTNAME/perlbrew/etc/bashrc"
	fi
fi

# Perl local::lib
if [[ -d ~/$HOSTNAME/perl5 ]]
then
	eval "$(perl -I ~/ "$HOSTNAME/perl5/lib/perl5" -Mlocal::lib="$HOME/$HOSTNAME/perl5")"
fi

# RVM
which rvm > /dev/null 2>&1
if [[ $? -ne 0 ]]; then
	[[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm"
fi

# CCACHE
[[ -d ~/ccache ]] && export CCACHE_DIR=~/ccache
[[ -d ~/$HOSTNAME/ccache ]] && export CCACHE_DIR=~/$HOSTNAME/ccache

# CDPATH
# We need to add . as /bin/sh will ONLY consider CDPATH if it is set!
cdpathadd . pre
cdpathadd "$HOME/$HOSTNAME"

# LESS
export LESS="-F -X -R"

# Sensible file permissions by default
umask 022

# allow core files
ulimit -c unlimited

# neovim
export NVIM_TUI_ENABLE_CURSOR_SHAPE=0
