# shellcheck shell=bash
# shellcheck disable=SC1090,SC1091
# vim: se syn=sh:

echo "$HOSTNAME $(date +"%Y-%m-%d %H:%M:%S") $$ $PPID common/profile" >> "$HOME/.dot_log"

# Initialise DOTFILES
[[ -f $HOME/.dot ]] && source "$HOME/.dot"

# This gets loaded as the only startup file prior to the gnome-session

# Justone variables and paths
# Try to ensure this only gets loaded once as it adds to the
# path. Do this by checking if 'env-check' is available. Can't
# rely on checking environment variables as they are retained
# when the PATH is cleared for stuff like 'tmux' sessions.
# Do this early as it clobbers LD_LIBRARY_PATH
which env-check > /dev/null 2>&1
if [[ $? -ne 0 ]]; then
	if [ -f /etc/justone_profile ]; then
		. /etc/justone_profile
	fi
fi

#################
# Path functions.
#################

# Path add function
# If there is a second parameter then prepend instead of append
pathadd() {
	if [ -d "$1" ] && [[ ":$PATH:" != *":$1:"* ]]; then
		if [ -z "$2" ]; then
			PATH="${PATH:+"$PATH:"}$1"
		else
			PATH="$1${PATH:+":$PATH"}"
		fi
	fi
}

# LD_LIBRARY_PATH
# If there is a second parameter then prepend instead of append
ldpathadd() {
	if [ -d "$1" ] && [[ ":$LD_LIBRARY_PATH:" != *":$1:"* ]]; then
		if [ -z "$2" ]; then
			LD_LIBRARY_PATH="${LD_LIBRARY_PATH:+"$LD_LIBRARY_PATH:"}$1"
		else
			LD_LIBRARY_PATH="$1${LD_LIBRARY_PATH:+":$LD_LIBRARY_PATH"}"
		fi
	fi
}

# MANPATH
# If there is a second parameter then prepend instead of append
manpathadd() {
	if [ -d "$1" ] && [[ ":$MANPATH:" != *":$1:"* ]]; then
		if [ -z "$2" ]; then
			MANPATH="${MANPATH:+"$MANPATH:"}$1"
		else
			MANPATH="$1${MANPATH:+":$MANPATH"}"
		fi
	fi
}

# Path add function
# If there is a second parameter then prepend instead of append
cdpathadd() {
	if [ -d "$1" ] && [[ ":$CDPATH:" != *":$1:"* ]]; then
		if [ -z "$2" ]; then
			CDPATH="${CDPATH:+"$CDPATH:"}$1"
		else
			CDPATH="$1${CDPATH:+":$CDPATH"}"
		fi
	fi
}

# Library path
ldpathadd /usr/local/lib

# Locally installed stuff.
pathadd "$ORIG_HOME/install/bin" pre
pathadd ~/install/bin pre
pathadd "$HOME/$HOSTNAME/install/bin" pre
ldpathadd "$ORIG_HOME/install/lib" pre
ldpathadd ~/install/lib/x86_64-linux-gnu pre
ldpathadd ~/install/lib pre
ldpathadd "$HOME/$HOSTNAME/install/lib" pre
manpathadd "$ORIG_HOME/install/share/man" pre
manpathadd ~/install/share/man pre
manpathadd "$HOME/$HOSTNAME/install/share/man" pre
manpathadd "$ORIG_HOME/$HOSTNAME/install/share/man" pre
manpathadd ~/install/man pre
manpathadd "$HOME/$HOSTNAME/install/man" pre

# sbin
pathadd /usr/sbin
pathadd /sbin

# go
pathadd ~/go/bin

# Qt 5
pathadd ~/stuff/qt-5.8.0/5.8/gcc_64/bin
ldpathadd ~/stuff/qt-5.8.0/5.8/gcc_64/lib

# .local stuff (seems the Python way of doing things)
pathadd ~/.local/bin pre
ldpathadd ~/.local/lib pre
manpathadd ~/.local/man pre

# Snap
pathadd /snap/bin

# GO
pathadd ~/stuff/go-git/bin

# Setting MANPATH at all means default man path isn't checked :(
manpathadd /usr/share/man

# Perlbrew
pathadd ~/perl5/perlbrew/bin pre

# Cargo (rust)
pathadd ~/.cargo/bin

# Always stick my bin on the front of the path
[[ -n $_ORIG_HOME ]] && pathadd "$_ORIG_HOME/bin" pre
pathadd ~/bin pre
# pathadd "$HOME/$HOSTNAME/bin" pre

# git hub plugin
if [[ -d ~/stuff/git-hub ]]; then
	pathadd ~/stuff/git-hub/lib
	manpathadd ~/stuff/git-hub/man
	export GIT_HUB_ROOT=$HOME/stuff/git-hub
fi

# Ensure PATH and MANPATH are exported
export PATH LD_LIBRARY_PATH MANPATH

# Setup test directory for PostgreSQL JustOne tests
# This needs to be a normalised path
PGTESTROOT=$HOME
# [[ -d /run/shm ]] && PGTESTROOT=/run/shm/sean
[[ ! -d $PGTESTROOT ]] && mkdir "$PGTESTROOT"
[[ -d $PGTESTROOT/test ]] && PGTESTDIR=$PGTESTROOT/test/master
[[ -d $PGTESTROOT/$HOSTNAME/test ]] && PGTESTDIR=$PGTESTROOT/$HOSTNAME/test/master
[[ -z $PGTESTDIR ]] && PGTESTDIR=$PGTESTROOT/test/master
[[ ! -d $PGTESTDIR ]] && mkdir -p "$PGTESTDIR"
PGTESTDIR=$(readlink -f "$PGTESTDIR")
export PGTESTDIR
unset PGTESTROOT
unset KEEP_DATA_DIRS

# Make
# Note the justone profile sets this, but we override it here
MAX_JOBS=$(( $(grep -c processor /proc/cpuinfo) * 3 / 4 ))
MAX_LOAD=$(( MAX_JOBS ))
MAKEFLAGS="-j$MAX_JOBS -l$MAX_LOAD V=0 --no-print-directory"
export MAKEFLAGS

# Ninja
export NINJA_STATUS="[%f/%t] [%r/%o/%p] "
export NINJAFLAGS="-j$MAX_JOBS -l$MAX_LOAD"

# Temp folder
export TMPDIR=/tmp/${USER:-$LOGNAME}
[[ ! -d $TMPDIR ]] && mkdir "$TMPDIR"

# Setup solarized dircolors
if [[ -d $DOTFILES/externals/dircolors-solarized ]]; then
	if [[ -f $DOTFILES/externals/dircolors-solarized/dircolors.ansi-light ]]; then
		eval "$(dircolors "$DOTFILES/externals/dircolors-solarized/dircolors.ansi-light")"
	fi
fi

# Java home
if [[ -z $JAVA_HOME ]]
then
	case $(hostname) in
		iowa)
			export JAVA_HOME=/usr/lib/jvm/java-1.7.0-openjdk-amd64
			;;
		*)
			export JAVA_HOME=/usr/lib/jvm/default-java
			;;
	esac
fi

# # Perlbrew
if [[ -d ~/perl5/perlbrew ]]
then
	export PERLBREW_ROOT=~/perl5/perlbrew
	export PERLBREW_HOME=~/.perlbrew

	if [[ -f $PERLBREW_ROOT/etc/bashrc ]]
	then
		source "$PERLBREW_ROOT/etc/bashrc"
	fi

fi

# local::lib
if [[ -d ~/perl5/lib/perl5 ]]
then
	# shellcheck disable=SC2046
	eval $(perl -I~/perl5/lib/perl5 -Mlocal::lib)
fi

# STOW
export STOW_DIR=~/install/stow

# RVM
which rvm > /dev/null 2>&1
if [[ $? -ne 0 ]]; then
	[[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm"
fi

# CCACHE
[[ -d ~/ccache ]] && export CCACHE_DIR=~/ccache
[[ -d ~/$HOSTNAME/ccache ]] && export CCACHE_DIR=~/$HOSTNAME/ccache
export CCACHE_NOHASHDIR=1

# CDPATH
# We need to add . as /bin/sh will ONLY consider CDPATH if it is set!
cdpathadd . pre
# cdpathadd "$HOME/$HOSTNAME"

# LESS
export LESS="-F -X -R"

# Sensible file permissions by default
umask 022

# allow core files
ulimit -c unlimited

# neovim
if which -a nvim > /dev/null 2>&1
then
	export EDITOR=nvim
elif which -a vim > /dev/null 2>&1
then
	export EDITOR=vim
else
	export EDITOR=vi
fi

# Python (pyenv)
PYENV_ROOT="$HOME/.pyenv"
pathadd "$PYENV_ROOT/bin" pre
if hash pyenv >& /dev/null
then
	export PYENV_ROOT
	eval "$(pyenv init -)"
	eval "$(pyenv virtualenv-init -)"
fi
